package com.dpkabe.maze.activity;

import android.app.Activity;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.Point;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.Display;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Toast;

import com.dpkabe.maze.bluetooth.BluetoothChatService;
import com.dpkabe.maze.bluetooth.BluetoothEncoderDecoder;
import com.dpkabe.maze.bluetooth.BluetoothMediator;
import com.dpkabe.maze.mazeutils.MazeConstants;
import com.dpkabe.maze.view.PracticeModeView;
import com.example.maze.R;

/**
 * Expects KEY_MAZE String extra from user, which is supposed to be a String
 * obtained by encoding a maze generated by the MazeGenerator class with the
 * BluetoothEncoderDecoder.encodeMaze(int[][]) function
 * 
 * @author USER
 * 
 */
public class FlexibleMazeActivity extends Activity {

	public static final int QUIT_DELAY = 2000;// in milliseconds
	private boolean quitInitiated = false;
	// BT STARTS
	private static final String TAG = "BluetoothChat";
	private static final boolean D = true;

	// Message types sent from the BluetoothChatService Handler
	public static final int MESSAGE_STATE_CHANGE = 1;
	public static final int MESSAGE_READ = 2;
	public static final int MESSAGE_WRITE = 3;
	public static final int MESSAGE_DEVICE_NAME = 4;
	public static final int MESSAGE_TOAST = 5;

	// Key names received from the BluetoothChatService Handler
	public static final String DEVICE_NAME = "device_name";
	public static final String TOAST = "toast";

	// Name of the connected device
	private String mConnectedDeviceName = null;
	// Member object for the chat services
	private BluetoothChatService mChatService = null;
	boolean eventCommunicated = false;
	Handler btHandler = new Handler() {
		@Override
		public void handleMessage(Message msg) {
			switch (msg.what) {
			case MESSAGE_STATE_CHANGE:
				if (D)
					Log.i(TAG, "MESSAGE_STATE_CHANGE: " + msg.arg1);
				switch (msg.arg1) {
				case BluetoothChatService.STATE_LISTEN:
				case BluetoothChatService.STATE_NONE:
					Toast.makeText(
							FlexibleMazeActivity.this,
							getString(R.string.title_not_connected,
									mConnectedDeviceName), Toast.LENGTH_SHORT)
							.show();
					break;
				}
				break;
			case MESSAGE_READ:
				byte[] readBuf = (byte[]) msg.obj;
				// construct a string from the valid bytes in the buffer
				String readMessage = new String(readBuf, 0, msg.arg1);
				Log.d("receivedString", readMessage);
				// Toast.makeText(FlexibleMazeActivity.this, readMessage,
				// Toast.LENGTH_SHORT).show();
				decodeMessage(readMessage);
				break;
			case MESSAGE_DEVICE_NAME:
				// save the connected device's name
				mConnectedDeviceName = msg.getData().getString(DEVICE_NAME);
				Toast.makeText(getApplicationContext(),
						"Connected to " + mConnectedDeviceName,
						Toast.LENGTH_SHORT).show();
				break;
			case MESSAGE_TOAST:
				Log.e("MESSAGE_TOAST", "ConnectActivity Handler");
				Toast.makeText(getApplicationContext(),
						msg.getData().getString(TOAST), Toast.LENGTH_SHORT)
						.show();
				break;
			}
		}
	};
	// BTENDS

	public static final String KEY_MAZE = "MAZE";
	private int mIntMaze[][];
	PracticeModeView mDrawView;
	private OnClickListener endActivityOnClickListener = new OnClickListener() {
		@Override
		public void onClick(View v) {
			FlexibleMazeActivity.this.finish();
		}
	};
	Handler mHandler = new Handler() {
		@Override
		public void handleMessage(Message msg) {
			Bundle b = msg.getData();
			float x = b.getFloat(MazeConstants.PositionUpdates.KEY_X_FRACTION);
			float y = b.getFloat(MazeConstants.PositionUpdates.KEY_Y_FRACTION);
			// we don't care about EVENT_LOSS as opponent loss can only be
			// caused by our win
			switch (msg.what) {
			case MazeConstants.EVENT_CRASH:
				onCrash();
				break;
			case MazeConstants.EVENT_WIN:
				onWin();
				break;
			case MazeConstants.EVENT_POSITION_UPDATE:
				onOwnPositionUpdate(x, y);
				break;
			case MazeConstants.QUIT_MAZE:
				onBackPressed();
				break;
			}
		}
	};

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		mChatService = BluetoothMediator.mChatService;// alt: have the
														// BluetoothChatService
														// class have a static
														// variable maintaining
														// a reference to a
														// service onse it's
														// been started
		mChatService.setHandler(btHandler);

		mIntMaze = BluetoothEncoderDecoder.decodeMaze(getIntent()
				.getStringExtra(KEY_MAZE));

		Display display = getWindowManager().getDefaultDisplay();
		Point size = new Point();
		display.getSize(size);
		mDrawView = new PracticeModeView(this, size.x, size.y, mIntMaze,
				mHandler);
		mDrawView.setBackgroundColor(Color.WHITE);
		mDrawView.setOnClickListener(endActivityOnClickListener);
		setContentView(mDrawView);
	}

	/**
	 * messages are encoded using ':' as a delimiter. Variable-length
	 * instructions allowed. Guarenteed to have first part, serves as 'what'
	 * code
	 * 
	 * @param message
	 */
	public void decodeMessage(String message) {
		String[] parts = message.split(":");
		try{//TODO TECHICAL DEBT! ENSURE NON-NUMBERS ARE NOT SENT!
			int what = Integer.parseInt(parts[0]);switch (what) {
			case MazeConstants.EVENT_CRASH:
				onOpponentCrash();
				break;
			case MazeConstants.EVENT_WIN:
				onOpponentWin();
				break;
			// no onOpponentLoss as his loss is determined only by your win
			case MazeConstants.EVENT_POSITION_UPDATE:
				updateOpponentPosition(Float.parseFloat(parts[1]),
						Float.parseFloat(parts[2]));
				break;
			}
		}catch(NumberFormatException e){
			return;
		}
	}
	@Override
	public void onStop(){
		super.onStop();
		Intent i = new Intent(this,BluetoothChatService.class);
		stopService(i);
	}
	private void sendMessage(String message) {
		// Check that we're actually connected before trying anything
		if (mChatService.getState() != BluetoothChatService.STATE_CONNECTED) {
			Toast.makeText(this, R.string.not_connected, Toast.LENGTH_SHORT)
					.show();
			return;
		}
		// Check that there's actually something to send
		if (message.length() > 0) {
			// Get the message bytes and tell the BluetoothChatService to write
			mChatService.write(message.getBytes());
		}
	}

	// No onOpponentLoss() as opponent's loss is determined by your winning
	// only.
	// In case you win he is informed by the onWin() function
	public void onOpponentCrash() {
		eventCommunicated = true;// to prevent us from sending another message
									// back
		Toast.makeText(this, "Victory!", Toast.LENGTH_LONG).show();
		mDrawView.setDrawState(PracticeModeView.STATE_WIN);
	}

	public void onOpponentWin() {
		eventCommunicated = true;// not necessary as STATE_LOSS has no callback
									// mechanism
		mDrawView.setDrawState(PracticeModeView.STATE_LOSS);
	}

	// on<Event> functions below are expected to be called only by mDrawView
	public void onCrash() {
		// no need to update mDrawView's drawState as it alreayd knows when this
		// function is called
		if (!eventCommunicated) {// as drawView will inform in each onDraw
			eventCommunicated = true;
			sendMessage("" + MazeConstants.EVENT_CRASH);
		}
	}

	public void onWin() {
		if (!eventCommunicated) {
			eventCommunicated = true;
			sendMessage("" + MazeConstants.EVENT_WIN);
		}
	}

	public void onOwnPositionUpdate(float xFract, float yFract) {
		sendMessage(MazeConstants.EVENT_POSITION_UPDATE + ":" + xFract + ":"
				+ yFract);
		Log.d("ownPos", "o" + xFract + ":" + yFract);
	}

	public void updateOpponentPosition(float xFract, float yFract) {
		mDrawView.updateOpponentPosition(xFract, yFract);
		Log.d("oppPos", "opp" + xFract + ":" + yFract);
	}
}